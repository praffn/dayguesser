{"version":3,"sources":["components/DayGuesser/Days.ts","components/DayGuesser/DayButton.tsx","components/DayGuesser/DayList.tsx","Warehouse.ts","components/DayGuesser/DayGuesser.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Day","DayButton","props","react_default","a","createElement","className","onClick","value","label","DayList","DayGuesser_DayButton","onDayClick","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Warehouse","namespace","separator","arguments","length","undefined","Object","classCallCheck","this","key","qKey","concat","data","storage","JSON","parse","stringify","def","set","v","get","localStorage","DG_NAMESPACE","YEAR","Date","getFullYear","START_DATE","getTime","END_DATE","generateRandomDate","start","end","Math","random","MONTH_NAMES","DayGuesser","_this","possibleConstructorReturn","getPrototypeOf","call","warehouse","guessDay","bind","assertThisInitialized","resetPoints","state","points","date","day","getDay","dateIsDay","incrementPoints","newDate","setState","by","month","getMonth","getDate","year","console","log","dateToString","DayGuesser_DayList","getOrDefault","Component","App","DayGuesser_DayGuesser","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67f0f735.chunk.js","sourcesContent":["export enum Day {\n  Sunday = 0,\n  Monday = 1,\n  Tuesday = 2,\n  Wednesday = 3,\n  Thursday = 4,\n  Friday = 5,\n  Saturday = 6,\n}\n\nexport function dateIsDay(date: Date, day: Day): boolean {\n  return date.getDay() === day;\n}\n","import React from 'react';\n\nimport { Day } from './Days';\n\ninterface Props {\n  label: string;\n  value: Day,\n  onClick: (day: Day) => void;\n}\n\nconst DayButton = (props: Props) => (\n  <div className=\"DayButton\" onClick={() => props.onClick(props.value)}>\n    { props.label }\n  </div>\n);\n\nexport default DayButton;\n","import React from 'react';\n\nimport { Day } from './Days';\nimport DayButton from './DayButton';\n\ninterface Props {\n  onDayClick: (day: Day) => void;\n}\n\nconst DayList = (props: Props) => (\n  <ul className=\"DayList\">\n    <li className=\"DayList-Item\">\n      <DayButton\n        onClick={props.onDayClick}\n        label=\"Sunday\"\n        value={Day.Sunday} />\n    </li>\n    <li className=\"DayList-Item\">\n      <DayButton\n        onClick={props.onDayClick}\n        label=\"Monday\"\n        value={Day.Monday} />\n    </li>\n    <li className=\"DayList-Item\">\n      <DayButton\n        onClick={props.onDayClick}\n        label=\"Tuesday\"\n        value={Day.Tuesday} />\n    </li>\n    <li className=\"DayList-Item\">\n      <DayButton\n        onClick={props.onDayClick}\n        label=\"Wednesday\"\n        value={Day.Wednesday} />\n    </li>\n    <li className=\"DayList-Item\">\n      <DayButton\n        onClick={props.onDayClick}\n        label=\"Thursday\"\n        value={Day.Thursday} />\n    </li>\n    <li className=\"DayList-Item\">\n      <DayButton\n        onClick={props.onDayClick}\n        label=\"Friday\"\n        value={Day.Friday} />\n    </li>\n    <li className=\"DayList-Item\">\n      <DayButton\n        onClick={props.onDayClick}\n        label=\"Saturday\"\n        value={Day.Saturday} />\n    </li>\n  </ul>\n);\n\nexport default DayList;\n","export default class Warehouse {\n  private readonly namespace: string;\n  private readonly separator: string;\n  \n  constructor(namespace: string, separator: string = '-') {\n    this.namespace = namespace;\n    this.separator = separator;\n  }\n\n  public get<T = any>(key: string): T | undefined {\n    const qKey = `${this.namespace}${this.separator}${key}`;\n    const data = Warehouse.storage[qKey];\n    if (data) return JSON.parse(data);\n    return undefined;\n  }\n\n  public set(key: string, value: any) {\n    const qKey = `${this.namespace}${this.separator}${key}`;\n    Warehouse.storage[qKey] = JSON.stringify(value);\n  }\n\n  public getOrDefault<T = any>(key: string, def: T, set: 'SET' | 'NOSET' = 'SET'): T {\n    const v = this.get(key);\n    if (!v) {\n      if (set == 'SET') this.set(key, def);\n      return def;\n    }\n    return v;\n  }\n\n  // public get(key: string): string | undefined {\n  //   const qKey = `${this.namespace}${this.separator}${key}`;\n  //   return Warehouse.storage[qKey];\n  // }\n\n  // public getJSON<T>(key: string): T | undefined {\n  //   const qKey = `${this.namespace}${this.separator}${key}`;\n  //   const data = this.get(key);\n  //   if (data) {\n  //     return JSON.parse(data);\n  //   } else {\n  //     return undefined;\n  //   }\n  // }\n\n  // public set(key: string, value: string) {\n  //   const qKey = `${this.namespace}${this.separator}${key}`;\n  //   Warehouse.storage[qKey] = value;\n  // }\n\n  // public setJSON(key: string, value: any) {\n  //   const qKey = `${this.namespace}${this.separator}${key}`;\n  //   Warehouse.storage[qKey] = JSON.stringify(value);\n  // }\n\n  private static readonly storage =\n    localStorage || {};\n}\n","import React, { Component } from 'react';\n\nimport DayList from './DayList';\nimport Warehouse from '../../Warehouse';\nimport { Day, dateIsDay } from './Days';\n\nconst DG_NAMESPACE = 'dayguesser::0.0.1';\n\ninterface DayGuesserState {\n  date: Date;\n  points: number;\n}\n\nconst YEAR = (new Date()).getFullYear();\nconst START_DATE = (new Date(YEAR, 0, 1)).getTime();\nconst END_DATE = (new Date(YEAR, 11, 31)).getTime();\n\nfunction generateRandomDate(start = START_DATE, end = END_DATE): Date {\n  return new Date(start + Math.random() * (end - start));\n}\n\nconst MONTH_NAMES = [\n  'Jan', 'Feb', 'Mar',\n  'Apr', 'May', 'Jun',\n  'Jul', 'Aug', 'Sep',\n  'Oct', 'Nov', 'Dec',\n];\n\nfunction dateToString(date: Date): string {\n  const month = MONTH_NAMES[date.getMonth()];\n  const day = date.getDate();\n  const year = date.getFullYear();\n  console.log(date);\n  return `${month} ${day}, ${year}`;\n}\n\nexport default class DayGuesser extends Component<{}, DayGuesserState> {\n  private readonly warehouse: Warehouse;\n\n  constructor(props: any) {\n    super(props);\n    this.warehouse = new Warehouse(DG_NAMESPACE);\n    this.guessDay = this.guessDay.bind(this);\n    this.resetPoints = this.resetPoints.bind(this);\n    this.state = {\n      points: 0,\n      date: generateRandomDate(),\n    }\n  }\n\n  guessDay(day: Day) {\n    if (dateIsDay(this.state.date, day)) {\n      this.incrementPoints(1);\n    } else {\n      this.incrementPoints(-1);\n    }\n    this.newDate();\n    // const d = parseInt(Day[day]);\n    // if (dateIsDay(this.state.date, d)) {\n    //   this.incrementPoints(1);\n    // } else {\n    //   this.incrementPoints(-1);\n    // }\n    // this.newDate();\n  }\n\n  newDate() {\n    const date = generateRandomDate();\n    this.setState({ date });\n  }\n\n  incrementPoints(by: number) {\n    let points = this.state.points + by;\n    points = points < 0 ? 0 : points;\n    this.warehouse.set('points', points);\n    this.setState({ points });\n  }\n\n  resetPoints() {\n    const points = 0;\n    this.warehouse.set('points', points);\n    this.setState({ points });\n  }\n\n  render() {\n    return (\n      <div className=\"DayGuesser\">\n        <header className=\"DayGuesser-Header\">\n          <h1 className=\"DayGuesser-Date\">{ dateToString(this.state.date) }</h1>\n          <p onClick={this.resetPoints} className=\"DayGuesser-Points\">{ this.state.points }</p>\n        </header>\n        \n        <DayList onDayClick={this.guessDay}/>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    const points = this.warehouse.getOrDefault<number>('points', 0);\n    this.setState({ points });\n  }\n}\n","import React from 'react';\n\nimport DayGuesser from './components/DayGuesser/DayGuesser'\n\nconst App = () => (\n  <div className=\"App\">\n    <DayGuesser />\n  </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: any, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: any, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}